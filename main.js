!function(){"use strict";class e{constructor(e,t,s,r,i,n){this._title=e.name,this._image=e.link,this._data=e,this._userId=s,this._cardSelector=t,this._handleCardClick=r,this._handleDeleteButton=i,this._handleLikeClick=n,this._likes=this._data.likes}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._card=this._getTemplate(),this._likeButton=this._card.querySelector(".card__like-button"),this._trashButton=this._card.querySelector(".card__trash-button"),this._photoCard=this._card.querySelector(".card__photo"),this._likeCounter=this._card.querySelector(".card__like-counter"),this._setEventListeners(),this._photoCard.src=this._image,this._photoCard.alt=this._title,this._card.querySelector(".card__title").textContent=this._title,this._renderLikes(),this._data.owner._id!==this._userId&&(this._trashButton.removeEventListener("click",this._handleDeleteButton),this._trashButton.style="display: none"),this._card}_setEventListeners(){this._likeButton.addEventListener("click",this._handleLikeClick),this._photoCard.addEventListener("click",(()=>this._handleCardClick())),this._trashButton.addEventListener("click",this._handleDeleteButton)}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this._likeCounter.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}isLiked(){return this._likes.map((e=>e._id)).find((e=>e===this._userId))}clickToRemove(){this._card.remove(),this._card.null}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e){t(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),t(this,"_handleOverlay",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup__close-button")}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("mousedown",this._handleOverlay)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("mousedown",this._handleOverlay)}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close()))}}class r extends s{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".popup__form"),this._inputList=Array.from(this._form.querySelectorAll(".form__input")),this._submitButton=this._popup.querySelector(".form__button-save"),this._textOnButton=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())})),super.setEventListeners()}close(){super.close(),this._form.reset()}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._textOnButton}}class i{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}_showInputError(e,t){const s=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this.disableButton():this.enableButton()}hideError(){this._inputList.forEach((e=>{this._hideInputError(e)}))}}const n=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_processResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._processResponse)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._processResponse)}patchUserProfile(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._processResponse)}createCard(e){let{name:t,link:s}=e;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._processResponse)}deleteCard(e){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards/".concat(e),{method:"DELETE",headers:this._headers}).then(this._processResponse)}likeCard(e){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards/likes/".concat(e),{method:"PUT",headers:this._headers}).then(this._processResponse)}unLikeCard(e){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards/likes/".concat(e),{method:"DELETE",headers:this._headers}).then(this._processResponse)}changeProfilePicture(e){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._processResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"3b82c4e5-0fac-48ec-9210-bfe6ee07c30f","Content-Type":"application/json"}}),o=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),h=document.querySelector(".profile__edit-picture"),c={},l=new class{constructor(e){let{nameSelctor:t,jobSelctor:s}=e;this._profileName=document.querySelector(t),this._profileBreed=document.querySelector(s),this._userAvatar=document.querySelector(".profile__avatar")}getUserInfo(){return{name:this._profileName.textContent,job:this._profileBreed.textContent,avatar:this._userAvatar.src,id:this._userId}}setUserInfo(e,t,s){this._profileName.textContent=e,this._profileBreed.textContent=t,this._userId=s}setUserAvatar(e){this._userAvatar.src=e}}({nameSelctor:".profile__name",jobSelctor:".profile__about-me"}),u=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}renderCard(e){e.forEach((e=>{this._renderer(e)}))}appendItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}((e=>{u.appendItem(_(e))}),".cards");function _(t){const s=l.getUserInfo().id,r=new e(t,"#card-template",s,(()=>{m.open(t.name,t.link)}),(()=>{f.open(),f.setAction((()=>{f.renderLoading(!0),n.deleteCard(t._id).then((()=>{r.clickToRemove(),f.close()})).catch(console.log).finally((()=>{f.renderLoading(!1)}))}))}),(()=>{r.isLiked()?n.unLikeCard(t._id).then((e=>{r.updateLikes(e.likes)})).catch(console.log):n.likeCard(t._id).then((e=>{r.updateLikes(e.likes)})).catch(console.log)}));return r.generateCard()}Promise.all([n.getUserInfo(),n.getInitialCards()]).then((e=>{let[t,s]=e;l.setUserInfo(t.name,t.about,t._id),l.setUserAvatar(t.avatar),u.renderCard(s)})).catch(console.log);const d=new r(".popup_type_profile",(e=>{d.renderLoading(!0),n.patchUserProfile(e.name,e["about-me"]).then((()=>{l.setUserInfo(e.name,e["about-me"]),d.close()})).catch(console.log).finally((()=>{d.renderLoading(!1)}))})),p=new r(".popup_type_cards",(e=>{p.renderLoading(!0);const t={name:e["place-title"],link:e.image};n.createCard(t).then((e=>{u.prependItem(_(e)),p.close()})).catch(console.log).finally((()=>{p.renderLoading(!1)}))})),m=new class extends s{constructor(e){super(e),this._popupImg=this._popup.querySelector(".popup__img"),this._popupPhotoTitle=this._popup.querySelector(".popup__photo-title")}open(e,t){super.open(),this._popupImg.src=t,this._popupImg.alt="Beautiful view of ".concat(e),this._popupPhotoTitle.textContent=e}}(".popup_type_photo"),v=new r(".popup_type_avatar",(e=>{v.renderLoading(!0),n.changeProfilePicture(e.avatar).then((e=>{l.setUserAvatar(e.avatar),v.close()})).catch(console.log).finally((()=>{v.renderLoading(!1)}))})),f=new class extends r{setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}setAction(e){this._handleSubmit=e}}(".popup_type_delete");var L;d.setEventListeners(),p.setEventListeners(),m.setEventListeners(),v.setEventListeners(),f.setEventListeners(),o.addEventListener("click",(()=>{const e=c["edit-form"];e.hideError(),e.enableButton();const t=l.getUserInfo(),s={name:t.name,"about-me":t.job};d.setInputValues(s),d.open()})),a.addEventListener("click",(()=>{const e=c["add-form"];e.disableButton(),e.hideError(),p.open()})),h.addEventListener("click",(()=>{const e=c["avatar-form"];e.enableButton(),e.hideError(),v.open()})),L={inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_disable",inputErrorClass:"popup__input_type_error",errorClass:"form__input-error_active"},Array.from(document.querySelectorAll(".popup__form")).forEach((e=>{const t=new i(L,e),s=e.getAttribute("name");c[s]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,