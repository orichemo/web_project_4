!function(){"use strict";class t{constructor(t,e,s,r,i,o){this._title=t.name,this._image=t.link,this._data=t,this._userId=s,this._cardSelector=e,this._handleCardClick=r,this._handleDeleteButton=i,this._handleLikeClick=o,this._likes=this._data.likes,this._like=!1}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._card=this._getTemplate(),this._likeButton=this._card.querySelector(".card__like-button"),this._trashButton=this._card.querySelector(".card__trash-button"),this._photoCard=this._card.querySelector(".card__photo"),this._likeCounter=this._card.querySelector(".card__like-counter"),this._setEventListeners(),this._likeCounter.textContent=this._likes.length,this._photoCard.src=this._image,this._photoCard.alt=this._title,this._card.querySelector(".card__title").textContent=this._title,this._card}_setEventListeners(){this._isLike(),this._likeButton.addEventListener("click",this._handleLikeClick),this._photoCard.addEventListener("click",(()=>this._handleCardClick())),this._data.owner._id===this._userId?this._trashButton.addEventListener("click",this._handleDeleteButton):this._trashButton.style="display: none"}clickLike(t){this._like=!this._like,this._likes=t,this._likeCounter.textContent=t.length,this._likeButton.classList.toggle("card__like-button_active")}_isLike(){this._data.likes.map((t=>t._id)).find((t=>t===this._userId))&&(this._likeButton.classList.add("card__like-button_active"),this._like=!0)}likeIsClicked(){return this._like}clickToRemove(){this._card.remove()}}function e(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}class s{constructor(t){e(this,"_handleEscClose",(t=>{"Escape"===t.key&&this.close()})),e(this,"_handleOverlay",(t=>{t.target.classList.contains("popup")&&this.close()})),this._popup=document.querySelector(t),this._closeButton=this._popup.querySelector(".popup__close-button")}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose),this._popup.addEventListener("mousedown",this._handleOverlay)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose),this._popup.removeEventListener("mousedown",this._handleOverlay)}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close()))}}class r extends s{constructor(t,e){super(t),this._submitHandler=e,this._form=this._popup.querySelector(".popup__form"),this._inputList=Array.from(this._form.querySelectorAll(".form__input")),this._submitButton=this._popup.querySelector(".form__button-save"),this._textOnButton=this._submitButton.textContent}_getInputValues(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){this._form.addEventListener("submit",(t=>{t.preventDefault(),this._submitHandler(this._getInputValues()),this.close()})),super.setEventListeners()}close(){super.close(),this._form.reset()}renderLoading(t){this._submitButton.textContent=t?"Saving...":this._textOnButton}}class i{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=e,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}enableValidation(){this._formElement.addEventListener("submit",(t=>t.preventDefault())),this._setEventListeners()}_showInputError(t,e){const s=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.add(this._inputErrorClass),s.textContent=e,s.classList.add(this._errorClass)}_hideInputError(t){const e=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass),e.textContent=""}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputList)?this.disableButton():this.enableButton()}hideError(){this._inputList.forEach((t=>{this._hideInputError(t)}))}}const o=new class{constructor(t){let{baseUrl:e,headers:s}=t;this._baseUrl=e,this._headers=s}_customFetch(t){return t.ok?t.json():Promise.reject("Error: ".concat(t.status))}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._customFetch)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._customFetch)}patchUserProfile(t,e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:e})}).then(this._customFetch)}createCard(t){let{name:e,link:s}=t;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:s})}).then(this._customFetch)}deleteCard(t){fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards/".concat(t),{method:"DELETE",headers:this._headers})}likeCard(t){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards/likes/".concat(t),{method:"PUT",headers:this._headers}).then(this._customFetch)}unLikeCard(t){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards/likes/".concat(t),{method:"DELETE",headers:this._headers}).then(this._customFetch)}changeProfilePicture(t){return fetch("https://around.nomoreparties.co/v1/cohort-3-en/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._customFetch)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"3b82c4e5-0fac-48ec-9210-bfe6ee07c30f","Content-Type":"application/json"}}),n=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),c=document.querySelector(".profile__edit-picture"),h={},l=new class{constructor(t){let{nameSelctor:e,jobSelctor:s}=t;this._profileName=document.querySelector(e),this._profileBreed=document.querySelector(s),this._userAvatar=document.querySelector(".profile__avatar")}getUserInfo(){return{name:this._profileName.textContent,job:this._profileBreed.textContent,avatar:this._userAvatar.src,id:this._userId}}setUserInfo(t,e,s){this._profileName.textContent=t,this._profileBreed.textContent=e,this._userId=s}setUserAvatar(t){this._userAvatar.src=t}}({nameSelctor:".profile__name",jobSelctor:".profile__about-me"}),u=new class{constructor(t,e){this._renderer=t,this._container=document.querySelector(e)}renderCard(t){t.forEach((t=>{this._renderer(t)}))}addInitialItems(t){this._container.append(t)}addNewItem(t){this._container.prepend(t)}}((t=>{u.addInitialItems(_(t))}),".cards");function _(e){const s=l.getUserInfo().id,i=new t(e,"#card-template",s,(()=>{m.open(e.name,e.link)}),(()=>{const t=new r(".popup_type_delete",(()=>{i.clickToRemove(),o.deleteCard(e._id)}));t.open(),t.setEventListeners()}),(()=>{i.likeIsClicked()?o.unLikeCard(e._id).then((t=>{i.clickLike(t.likes)})).catch(console.log):o.likeCard(e._id).then((t=>{i.clickLike(t.likes)})).catch(console.log)}));return i.generateCard()}Promise.all([o.getUserInfo(),o.getInitialCards()]).then((t=>{let[e,s]=t;l.setUserInfo(e.name,e.about,e._id),l.setUserAvatar(e.avatar),u.renderCard(s)})).catch(console.log);const d=new r(".popup_type_profile",(t=>{d.renderLoading(!0),l.setUserInfo(t.name,t["about-me"]),o.patchUserProfile(t.name,t["about-me"]).catch(console.log).finally((()=>{d.renderLoading(!1)}))})),p=new r(".popup_type_cards",(t=>{p.renderLoading(!0);const e={name:t["place-title"],link:t.image};o.createCard(e).then((t=>u.addNewItem(_(t)))).catch(console.log).finally((()=>{d.renderLoading(!1)})),p.close()})),m=new class extends s{constructor(t){super(t),this._popupImg=this._popup.querySelector(".popup__img"),this._popupPhotoTitle=this._popup.querySelector(".popup__photo-title")}open(t,e){super.open(),this._popupImg.src=e,this._popupImg.alt="Beautiful view of ".concat(t),this._popupPhotoTitle.textContent=t}}(".popup_type_photo"),f=new r(".popup_type_avatar",(t=>{f.renderLoading(!0),o.changeProfilePicture(t.image).then((t=>{l.setUserAvatar(t.avatar)})).catch(console.log).finally((()=>{f.renderLoading(!1)}))}));var v;d.setEventListeners(),p.setEventListeners(),m.setEventListeners(),f.setEventListeners(),n.addEventListener("click",(()=>{const t=h["edit-form"];t.hideError(),t.enableButton();const e=l.getUserInfo(),s={name:e.name,"about-me":e.job};d.setInputValues(s),d.open()})),a.addEventListener("click",(()=>{const t=h["add-form"];t.disableButton(),t.hideError(),p.open()})),c.addEventListener("click",(()=>{const t=h["avatar-form"];t.enableButton(),t.hideError(),f.open()})),v={inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"form__submit_disable",inputErrorClass:"popup__input_type_error",errorClass:"form__input-error_active"},Array.from(document.querySelectorAll(".popup__form")).forEach((t=>{const e=new i(v,t),s=t.getAttribute("name");h[s]=e,e.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,